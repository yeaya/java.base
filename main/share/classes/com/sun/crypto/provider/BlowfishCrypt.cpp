#include <com/sun/crypto/provider/BlowfishCrypt.h>

#include <com/sun/crypto/provider/BlowfishConstants.h>
#include <com/sun/crypto/provider/SymmetricCipher.h>
#include <java/security/InvalidKeyException.h>
#include <jcpp.h>

#undef BLOWFISH_BLOCK_SIZE
#undef BLOWFISH_MAX_KEYSIZE
#undef F

using $BlowfishConstants = ::com::sun::crypto::provider::BlowfishConstants;
using $SymmetricCipher = ::com::sun::crypto::provider::SymmetricCipher;
using $ClassInfo = ::java::lang::ClassInfo;
using $FieldInfo = ::java::lang::FieldInfo;
using $MethodInfo = ::java::lang::MethodInfo;
using $InvalidKeyException = ::java::security::InvalidKeyException;

namespace com {
	namespace sun {
		namespace crypto {
			namespace provider {

$FieldInfo _BlowfishCrypt_FieldInfo_[] = {
	{"decrypting", "Z", nullptr, $PRIVATE, $field(BlowfishCrypt, decrypting)},
	{"p", "[I", nullptr, $PRIVATE | $FINAL, $field(BlowfishCrypt, p)},
	{"s0", "[I", nullptr, $PRIVATE | $FINAL, $field(BlowfishCrypt, s0)},
	{"s1", "[I", nullptr, $PRIVATE | $FINAL, $field(BlowfishCrypt, s1)},
	{"s2", "[I", nullptr, $PRIVATE | $FINAL, $field(BlowfishCrypt, s2)},
	{"s3", "[I", nullptr, $PRIVATE | $FINAL, $field(BlowfishCrypt, s3)},
	{"temp", "[I", nullptr, $PRIVATE | $FINAL, $field(BlowfishCrypt, temp)},
	{"pi", "[I", nullptr, $PRIVATE | $STATIC | $FINAL, $staticField(BlowfishCrypt, pi)},
	{}
};

$MethodInfo _BlowfishCrypt_MethodInfo_[] = {
	{"*clone", "()Ljava/lang/Object;", nullptr, $PROTECTED | $NATIVE},
	{"*equals", "(Ljava/lang/Object;)Z", nullptr, $PUBLIC},
	{"*finalize", "()V", nullptr, $PROTECTED | $DEPRECATED},
	{"*hashCode", "()I", nullptr, $PUBLIC | $NATIVE},
	{"<init>", "()V", nullptr, 0, $method(static_cast<void(BlowfishCrypt::*)()>(&BlowfishCrypt::init$))},
	{"F", "(I)I", nullptr, $PRIVATE, $method(static_cast<int32_t(BlowfishCrypt::*)(int32_t)>(&BlowfishCrypt::F))},
	{"cipherBlock", "([BI[BI)V", nullptr, $PRIVATE, $method(static_cast<void(BlowfishCrypt::*)($bytes*,int32_t,$bytes*,int32_t)>(&BlowfishCrypt::cipherBlock))},
	{"decryptBlock", "([BI[BI)V", nullptr, 0},
	{"decryptBlock", "([I)V", nullptr, $PRIVATE, $method(static_cast<void(BlowfishCrypt::*)($ints*)>(&BlowfishCrypt::decryptBlock))},
	{"encryptBlock", "([BI[BI)V", nullptr, 0},
	{"encryptBlock", "([I)V", nullptr, $PRIVATE, $method(static_cast<void(BlowfishCrypt::*)($ints*)>(&BlowfishCrypt::encryptBlock))},
	{"getBlockSize", "()I", nullptr, 0},
	{"init", "(ZLjava/lang/String;[B)V", nullptr, 0, nullptr, "java.security.InvalidKeyException"},
	{"*toString", "()Ljava/lang/String;", nullptr, $PUBLIC},
	{}
};

$ClassInfo _BlowfishCrypt_ClassInfo_ = {
	$FINAL | $ACC_SUPER,
	"com.sun.crypto.provider.BlowfishCrypt",
	"com.sun.crypto.provider.SymmetricCipher",
	"com.sun.crypto.provider.BlowfishConstants",
	_BlowfishCrypt_FieldInfo_,
	_BlowfishCrypt_MethodInfo_
};

$Object* allocate$BlowfishCrypt($Class* clazz) {
	return $of($alloc(BlowfishCrypt));
}

int32_t BlowfishCrypt::hashCode() {
	 return this->$SymmetricCipher::hashCode();
}

bool BlowfishCrypt::equals(Object$* obj) {
	 return this->$SymmetricCipher::equals(obj);
}

$Object* BlowfishCrypt::clone() {
	 return this->$SymmetricCipher::clone();
}

$String* BlowfishCrypt::toString() {
	 return this->$SymmetricCipher::toString();
}

void BlowfishCrypt::finalize() {
	this->$SymmetricCipher::finalize();
}

$ints* BlowfishCrypt::pi = nullptr;

void BlowfishCrypt::init$() {
	$SymmetricCipher::init$();
	this->decrypting = false;
	$set(this, p, $new($ints, 18));
	$set(this, s0, $new($ints, 256));
	$set(this, s1, $new($ints, 256));
	$set(this, s2, $new($ints, 256));
	$set(this, s3, $new($ints, 256));
	$set(this, temp, $new($ints, 2));
}

int32_t BlowfishCrypt::getBlockSize() {
	return $BlowfishConstants::BLOWFISH_BLOCK_SIZE;
}

void BlowfishCrypt::init(bool decrypting, $String* algorithm, $bytes* rawKey) {
	this->decrypting = decrypting;
	if (!$nc(algorithm)->equalsIgnoreCase("Blowfish"_s)) {
		$throwNew($InvalidKeyException, "Wrong algorithm: Blowfish required"_s);
	}
	if ($nc(rawKey)->length > $BlowfishConstants::BLOWFISH_MAX_KEYSIZE) {
		$throwNew($InvalidKeyException, "Key too long (> 448 bits)"_s);
	}
	int32_t i = 0;
	int32_t j = 0;
	int32_t count = 0;
	$System::arraycopy(BlowfishCrypt::pi, 0, this->p, 0, 18);
	$System::arraycopy(BlowfishCrypt::pi, 18, this->s0, 0, 256);
	$System::arraycopy(BlowfishCrypt::pi, 18 + 256, this->s1, 0, 256);
	$System::arraycopy(BlowfishCrypt::pi, 18 + 512, this->s2, 0, 256);
	$System::arraycopy(BlowfishCrypt::pi, 18 + 768, this->s3, 0, 256);
	int32_t tmp = 0;
	int32_t nLen = $nc(rawKey)->length;
	int32_t nKeyPos = 0;
	for (i = 0; i < 18; ++i) {
		for (j = 0; j < 4; ++j) {
			tmp <<= 8;
			tmp |= (int32_t)(255 & (uint32_t)(int32_t)rawKey->get(nKeyPos));
			if (++nKeyPos == nLen) {
				nKeyPos = 0;
			}
		}
		(*$nc(this->p))[i] ^= tmp;
	}
	$var($ints, data, $new($ints, 2));
	for (i = 0; i < 18; i += 2) {
		encryptBlock(data);
		$nc(this->p)->set(i, data->get(0));
		$nc(this->p)->set(i + 1, data->get(1));
	}
	for (j = 0; j < 256; j += 2) {
		encryptBlock(data);
		$nc(this->s0)->set(j, data->get(0));
		$nc(this->s0)->set(j + 1, data->get(1));
	}
	for (j = 0; j < 256; j += 2) {
		encryptBlock(data);
		$nc(this->s1)->set(j, data->get(0));
		$nc(this->s1)->set(j + 1, data->get(1));
	}
	for (j = 0; j < 256; j += 2) {
		encryptBlock(data);
		$nc(this->s2)->set(j, data->get(0));
		$nc(this->s2)->set(j + 1, data->get(1));
	}
	for (j = 0; j < 256; j += 2) {
		encryptBlock(data);
		$nc(this->s3)->set(j, data->get(0));
		$nc(this->s3)->set(j + 1, data->get(1));
	}
}

void BlowfishCrypt::encryptBlock($bytes* plain, int32_t plainOffset, $bytes* cipher, int32_t cipherOffset) {
	cipherBlock(plain, plainOffset, cipher, cipherOffset);
}

void BlowfishCrypt::decryptBlock($bytes* cipher, int32_t cipherOffset, $bytes* plain, int32_t plainOffset) {
	cipherBlock(cipher, cipherOffset, plain, plainOffset);
}

void BlowfishCrypt::cipherBlock($bytes* in, int32_t inOffset, $bytes* out, int32_t outOffset) {
	$nc(this->temp)->set(0, (((($nc(in)->get(inOffset)) << 24) | (((int32_t)(in->get(inOffset + 1) & (uint32_t)255)) << 16)) | (((int32_t)(in->get(inOffset + 2) & (uint32_t)255)) << 8)) | ((int32_t)(in->get(inOffset + 3) & (uint32_t)255)));
	$nc(this->temp)->set(1, ((((in->get(inOffset + 4)) << 24) | (((int32_t)(in->get(inOffset + 5) & (uint32_t)255)) << 16)) | (((int32_t)(in->get(inOffset + 6) & (uint32_t)255)) << 8)) | ((int32_t)(in->get(inOffset + 7) & (uint32_t)255)));
	if (this->decrypting) {
		decryptBlock(this->temp);
	} else {
		encryptBlock(this->temp);
	}
	int32_t t = $nc(this->temp)->get(0);
	$nc(out)->set(outOffset, (int8_t)(t >> 24));
	out->set(outOffset + 1, (int8_t)(t >> 16));
	out->set(outOffset + 2, (int8_t)(t >> 8));
	out->set(outOffset + 3, (int8_t)(t));
	t = $nc(this->temp)->get(1);
	out->set(outOffset + 4, (int8_t)(t >> 24));
	out->set(outOffset + 5, (int8_t)(t >> 16));
	out->set(outOffset + 6, (int8_t)(t >> 8));
	out->set(outOffset + 7, (int8_t)(t));
}

void BlowfishCrypt::encryptBlock($ints* value) {
	int32_t left = $nc(value)->get(0);
	int32_t right = value->get(1);
	left ^= $nc(this->p)->get(0);
	right ^= F(left) ^ $nc(this->p)->get(1);
	left ^= F(right) ^ $nc(this->p)->get(2);
	right ^= F(left) ^ $nc(this->p)->get(3);
	left ^= F(right) ^ $nc(this->p)->get(4);
	right ^= F(left) ^ $nc(this->p)->get(5);
	left ^= F(right) ^ $nc(this->p)->get(6);
	right ^= F(left) ^ $nc(this->p)->get(7);
	left ^= F(right) ^ $nc(this->p)->get(8);
	right ^= F(left) ^ $nc(this->p)->get(9);
	left ^= F(right) ^ $nc(this->p)->get(10);
	right ^= F(left) ^ $nc(this->p)->get(11);
	left ^= F(right) ^ $nc(this->p)->get(12);
	right ^= F(left) ^ $nc(this->p)->get(13);
	left ^= F(right) ^ $nc(this->p)->get(14);
	right ^= F(left) ^ $nc(this->p)->get(15);
	left ^= F(right) ^ $nc(this->p)->get(16);
	right ^= $nc(this->p)->get(17);
	value->set(0, right);
	value->set(1, left);
}

void BlowfishCrypt::decryptBlock($ints* value) {
	int32_t left = $nc(value)->get(1);
	int32_t right = value->get(0);
	right ^= $nc(this->p)->get(17);
	left ^= $nc(this->p)->get(16) ^ F(right);
	right ^= $nc(this->p)->get(15) ^ F(left);
	left ^= $nc(this->p)->get(14) ^ F(right);
	right ^= $nc(this->p)->get(13) ^ F(left);
	left ^= $nc(this->p)->get(12) ^ F(right);
	right ^= $nc(this->p)->get(11) ^ F(left);
	left ^= $nc(this->p)->get(10) ^ F(right);
	right ^= $nc(this->p)->get(9) ^ F(left);
	left ^= $nc(this->p)->get(8) ^ F(right);
	right ^= $nc(this->p)->get(7) ^ F(left);
	left ^= $nc(this->p)->get(6) ^ F(right);
	right ^= $nc(this->p)->get(5) ^ F(left);
	left ^= $nc(this->p)->get(4) ^ F(right);
	right ^= $nc(this->p)->get(3) ^ F(left);
	left ^= $nc(this->p)->get(2) ^ F(right);
	right ^= $nc(this->p)->get(1) ^ F(left);
	left ^= $nc(this->p)->get(0);
	value->set(0, left);
	value->set(1, right);
}

int32_t BlowfishCrypt::F(int32_t v) {
	return (($nc(this->s0)->get((int32_t)((uint32_t)v >> 24)) + $nc(this->s1)->get((int32_t)((v >> 16) & (uint32_t)255))) ^ $nc(this->s2)->get((int32_t)((v >> 8) & (uint32_t)255))) + $nc(this->s3)->get((int32_t)(v & (uint32_t)255));
}

void clinit$BlowfishCrypt($Class* class$) {
	$assignStatic(BlowfishCrypt::pi, $new($ints, {
		0x243F6A88,
		(int32_t)0x85A308D3,
		0x13198A2E,
		0x03707344,
		(int32_t)0xA4093822,
		0x299F31D0,
		0x082EFA98,
		(int32_t)0xEC4E6C89,
		0x452821E6,
		0x38D01377,
		(int32_t)0xBE5466CF,
		0x34E90C6C,
		(int32_t)0xC0AC29B7,
		(int32_t)0xC97C50DD,
		0x3F84D5B5,
		(int32_t)0xB5470917,
		(int32_t)0x9216D5D9,
		(int32_t)0x8979FB1B,
		(int32_t)0xD1310BA6,
		(int32_t)0x98DFB5AC,
		0x2FFD72DB,
		(int32_t)0xD01ADFB7,
		(int32_t)0xB8E1AFED,
		0x6A267E96,
		(int32_t)0xBA7C9045,
		(int32_t)0xF12C7F99,
		0x24A19947,
		(int32_t)0xB3916CF7,
		0x0801F2E2,
		(int32_t)0x858EFC16,
		0x636920D8,
		0x71574E69,
		(int32_t)0xA458FEA3,
		(int32_t)0xF4933D7E,
		0x0D95748F,
		0x728EB658,
		0x718BCD58,
		(int32_t)0x82154AEE,
		0x7B54A41D,
		(int32_t)0xC25A59B5,
		(int32_t)0x9C30D539,
		0x2AF26013,
		(int32_t)0xC5D1B023,
		0x286085F0,
		(int32_t)0xCA417918,
		(int32_t)0xB8DB38EF,
		(int32_t)0x8E79DCB0,
		0x603A180E,
		0x6C9E0E8B,
		(int32_t)0xB01E8A3E,
		(int32_t)0xD71577C1,
		(int32_t)0xBD314B27,
		0x78AF2FDA,
		0x55605C60,
		(int32_t)0xE65525F3,
		(int32_t)0xAA55AB94,
		0x57489862,
		0x63E81440,
		0x55CA396A,
		0x2AAB10B6,
		(int32_t)0xB4CC5C34,
		0x1141E8CE,
		(int32_t)0xA15486AF,
		0x7C72E993,
		(int32_t)0xB3EE1411,
		0x636FBC2A,
		0x2BA9C55D,
		0x741831F6,
		(int32_t)0xCE5C3E16,
		(int32_t)0x9B87931E,
		(int32_t)0xAFD6BA33,
		0x6C24CF5C,
		0x7A325381,
		0x28958677,
		0x3B8F4898,
		0x6B4BB9AF,
		(int32_t)0xC4BFE81B,
		0x66282193,
		0x61D809CC,
		(int32_t)0xFB21A991,
		0x487CAC60,
		0x5DEC8032,
		(int32_t)0xEF845D5D,
		(int32_t)0xE98575B1,
		(int32_t)0xDC262302,
		(int32_t)0xEB651B88,
		0x23893E81,
		(int32_t)0xD396ACC5,
		0x0F6D6FF3,
		(int32_t)0x83F44239,
		0x2E0B4482,
		(int32_t)0xA4842004,
		0x69C8F04A,
		(int32_t)0x9E1F9B5E,
		0x21C66842,
		(int32_t)0xF6E96C9A,
		0x670C9C61,
		(int32_t)0xABD388F0,
		0x6A51A0D2,
		(int32_t)0xD8542F68,
		(int32_t)0x960FA728,
		(int32_t)0xAB5133A3,
		0x6EEF0B6C,
		0x137A3BE4,
		(int32_t)0xBA3BF050,
		0x7EFB2A98,
		(int32_t)0xA1F1651D,
		0x39AF0176,
		0x66CA593E,
		(int32_t)0x82430E88,
		(int32_t)0x8CEE8619,
		0x456F9FB4,
		0x7D84A5C3,
		0x3B8B5EBE,
		(int32_t)0xE06F75D8,
		(int32_t)0x85C12073,
		0x401A449F,
		0x56C16AA6,
		0x4ED3AA62,
		0x363F7706,
		0x1BFEDF72,
		0x429B023D,
		0x37D0D724,
		(int32_t)0xD00A1248,
		(int32_t)0xDB0FEAD3,
		0x49F1C09B,
		0x075372C9,
		(int32_t)0x80991B7B,
		0x25D479D8,
		(int32_t)0xF6E8DEF7,
		(int32_t)0xE3FE501A,
		(int32_t)0xB6794C3B,
		(int32_t)0x976CE0BD,
		0x04C006BA,
		(int32_t)0xC1A94FB6,
		0x409F60C4,
		0x5E5C9EC2,
		0x196A2463,
		0x68FB6FAF,
		0x3E6C53B5,
		0x1339B2EB,
		0x3B52EC6F,
		0x6DFC511F,
		(int32_t)0x9B30952C,
		(int32_t)0xCC814544,
		(int32_t)0xAF5EBD09,
		(int32_t)0xBEE3D004,
		(int32_t)0xDE334AFD,
		0x660F2807,
		0x192E4BB3,
		(int32_t)0xC0CBA857,
		0x45C8740F,
		(int32_t)0xD20B5F39,
		(int32_t)0xB9D3FBDB,
		0x5579C0BD,
		0x1A60320A,
		(int32_t)0xD6A100C6,
		0x402C7279,
		0x679F25FE,
		(int32_t)0xFB1FA3CC,
		(int32_t)0x8EA5E9F8,
		(int32_t)0xDB3222F8,
		0x3C7516DF,
		(int32_t)0xFD616B15,
		0x2F501EC8,
		(int32_t)0xAD0552AB,
		0x323DB5FA,
		(int32_t)0xFD238760,
		0x53317B48,
		0x3E00DF82,
		(int32_t)0x9E5C57BB,
		(int32_t)0xCA6F8CA0,
		0x1A87562E,
		(int32_t)0xDF1769DB,
		(int32_t)0xD542A8F6,
		0x287EFFC3,
		(int32_t)0xAC6732C6,
		(int32_t)0x8C4F5573,
		0x695B27B0,
		(int32_t)0xBBCA58C8,
		(int32_t)0xE1FFA35D,
		(int32_t)0xB8F011A0,
		0x10FA3D98,
		(int32_t)0xFD2183B8,
		0x4AFCB56C,
		0x2DD1D35B,
		(int32_t)0x9A53E479,
		(int32_t)0xB6F84565,
		(int32_t)0xD28E49BC,
		0x4BFB9790,
		(int32_t)0xE1DDF2DA,
		(int32_t)0xA4CB7E33,
		0x62FB1341,
		(int32_t)0xCEE4C6E8,
		(int32_t)0xEF20CADA,
		0x36774C01,
		(int32_t)0xD07E9EFE,
		0x2BF11FB4,
		(int32_t)0x95DBDA4D,
		(int32_t)0xAE909198,
		(int32_t)0xEAAD8E71,
		0x6B93D5A0,
		(int32_t)0xD08ED1D0,
		(int32_t)0xAFC725E0,
		(int32_t)0x8E3C5B2F,
		(int32_t)0x8E7594B7,
		(int32_t)0x8FF6E2FB,
		(int32_t)0xF2122B64,
		(int32_t)0x8888B812,
		(int32_t)0x900DF01C,
		0x4FAD5EA0,
		0x688FC31C,
		(int32_t)0xD1CFF191,
		(int32_t)0xB3A8C1AD,
		0x2F2F2218,
		(int32_t)0xBE0E1777,
		(int32_t)0xEA752DFE,
		(int32_t)0x8B021FA1,
		(int32_t)0xE5A0CC0F,
		(int32_t)0xB56F74E8,
		0x18ACF3D6,
		(int32_t)0xCE89E299,
		(int32_t)0xB4A84FE0,
		(int32_t)0xFD13E0B7,
		0x7CC43B81,
		(int32_t)0xD2ADA8D9,
		0x165FA266,
		(int32_t)0x80957705,
		(int32_t)0x93CC7314,
		0x211A1477,
		(int32_t)0xE6AD2065,
		0x77B5FA86,
		(int32_t)0xC75442F5,
		(int32_t)0xFB9D35CF,
		(int32_t)0xEBCDAF0C,
		0x7B3E89A0,
		(int32_t)0xD6411BD3,
		(int32_t)0xAE1E7E49,
		0x00250E2D,
		0x2071B35E,
		0x226800BB,
		0x57B8E0AF,
		0x2464369B,
		(int32_t)0xF009B91E,
		0x5563911D,
		0x59DFA6AA,
		0x78C14389,
		(int32_t)0xD95A537F,
		0x207D5BA2,
		0x02E5B9C5,
		(int32_t)0x83260376,
		0x6295CFA9,
		0x11C81968,
		0x4E734A41,
		(int32_t)0xB3472DCA,
		0x7B14A94A,
		0x1B510052,
		(int32_t)0x9A532915,
		(int32_t)0xD60F573F,
		(int32_t)0xBC9BC6E4,
		0x2B60A476,
		(int32_t)0x81E67400,
		0x08BA6FB5,
		0x571BE91F,
		(int32_t)0xF296EC6B,
		0x2A0DD915,
		(int32_t)0xB6636521,
		(int32_t)0xE7B9F9B6,
		(int32_t)0xFF34052E,
		(int32_t)0xC5855664,
		0x53B02D5D,
		(int32_t)0xA99F8FA1,
		0x08BA4799,
		0x6E85076A,
		0x4B7A70E9,
		(int32_t)0xB5B32944,
		(int32_t)0xDB75092E,
		(int32_t)0xC4192623,
		(int32_t)0xAD6EA6B0,
		0x49A7DF7D,
		(int32_t)0x9CEE60B8,
		(int32_t)0x8FEDB266,
		(int32_t)0xECAA8C71,
		0x699A17FF,
		0x5664526C,
		(int32_t)0xC2B19EE1,
		0x193602A5,
		0x75094C29,
		(int32_t)0xA0591340,
		(int32_t)0xE4183A3E,
		0x3F54989A,
		0x5B429D65,
		0x6B8FE4D6,
		(int32_t)0x99F73FD6,
		(int32_t)0xA1D29C07,
		(int32_t)0xEFE830F5,
		0x4D2D38E6,
		(int32_t)0xF0255DC1,
		0x4CDD2086,
		(int32_t)0x8470EB26,
		0x6382E9C6,
		0x021ECC5E,
		0x09686B3F,
		0x3EBAEFC9,
		0x3C971814,
		0x6B6A70A1,
		0x687F3584,
		0x52A0E286,
		(int32_t)0xB79C5305,
		(int32_t)0xAA500737,
		0x3E07841C,
		0x7FDEAE5C,
		(int32_t)0x8E7D44EC,
		0x5716F2B8,
		(int32_t)0xB03ADA37,
		(int32_t)0xF0500C0D,
		(int32_t)0xF01C1F04,
		0x0200B3FF,
		(int32_t)0xAE0CF51A,
		0x3CB574B2,
		0x25837A58,
		(int32_t)0xDC0921BD,
		(int32_t)0xD19113F9,
		0x7CA92FF6,
		(int32_t)0x94324773,
		0x22F54701,
		0x3AE5E581,
		0x37C2DADC,
		(int32_t)0xC8B57634,
		(int32_t)0x9AF3DDA7,
		(int32_t)0xA9446146,
		0x0FD0030E,
		(int32_t)0xECC8C73E,
		(int32_t)0xA4751E41,
		(int32_t)0xE238CD99,
		0x3BEA0E2F,
		0x3280BBA1,
		0x183EB331,
		0x4E548B38,
		0x4F6DB908,
		0x6F420D03,
		(int32_t)0xF60A04BF,
		0x2CB81290,
		0x24977C79,
		0x5679B072,
		(int32_t)0xBCAF89AF,
		(int32_t)0xDE9A771F,
		(int32_t)0xD9930810,
		(int32_t)0xB38BAE12,
		(int32_t)0xDCCF3F2E,
		0x5512721F,
		0x2E6B7124,
		0x501ADDE6,
		(int32_t)0x9F84CD87,
		0x7A584718,
		0x7408DA17,
		(int32_t)0xBC9F9ABC,
		(int32_t)0xE94B7D8C,
		(int32_t)0xEC7AEC3A,
		(int32_t)0xDB851DFA,
		0x63094366,
		(int32_t)0xC464C3D2,
		(int32_t)0xEF1C1847,
		0x3215D908,
		(int32_t)0xDD433B37,
		0x24C2BA16,
		0x12A14D43,
		0x2A65C451,
		0x50940002,
		0x133AE4DD,
		0x71DFF89E,
		0x10314E55,
		(int32_t)0x81AC77D6,
		0x5F11199B,
		0x043556F1,
		(int32_t)0xD7A3C76B,
		0x3C11183B,
		0x5924A509,
		(int32_t)0xF28FE6ED,
		(int32_t)0x97F1FBFA,
		(int32_t)0x9EBABF2C,
		0x1E153C6E,
		(int32_t)0x86E34570,
		(int32_t)0xEAE96FB1,
		(int32_t)0x860E5E0A,
		0x5A3E2AB3,
		0x771FE71C,
		0x4E3D06FA,
		0x2965DCB9,
		(int32_t)0x99E71D0F,
		(int32_t)0x803E89D6,
		0x5266C825,
		0x2E4CC978,
		(int32_t)0x9C10B36A,
		(int32_t)0xC6150EBA,
		(int32_t)0x94E2EA78,
		(int32_t)0xA5FC3C53,
		0x1E0A2DF4,
		(int32_t)0xF2F74EA7,
		0x361D2B3D,
		0x1939260F,
		0x19C27960,
		0x5223A708,
		(int32_t)0xF71312B6,
		(int32_t)0xEBADFE6E,
		(int32_t)0xEAC31F66,
		(int32_t)0xE3BC4595,
		(int32_t)0xA67BC883,
		(int32_t)0xB17F37D1,
		0x018CFF28,
		(int32_t)0xC332DDEF,
		(int32_t)0xBE6C5AA5,
		0x65582185,
		0x68AB9802,
		(int32_t)0xEECEA50F,
		(int32_t)0xDB2F953B,
		0x2AEF7DAD,
		0x5B6E2F84,
		0x1521B628,
		0x29076170,
		(int32_t)0xECDD4775,
		0x619F1510,
		0x13CCA830,
		(int32_t)0xEB61BD96,
		0x0334FE1E,
		(int32_t)0xAA0363CF,
		(int32_t)0xB5735C90,
		0x4C70A239,
		(int32_t)0xD59E9E0B,
		(int32_t)0xCBAADE14,
		(int32_t)0xEECC86BC,
		0x60622CA7,
		(int32_t)0x9CAB5CAB,
		(int32_t)0xB2F3846E,
		0x648B1EAF,
		0x19BDF0CA,
		(int32_t)0xA02369B9,
		0x655ABB50,
		0x40685A32,
		0x3C2AB4B3,
		0x319EE9D5,
		(int32_t)0xC021B8F7,
		(int32_t)0x9B540B19,
		(int32_t)0x875FA099,
		(int32_t)0x95F7997E,
		0x623D7DA8,
		(int32_t)0xF837889A,
		(int32_t)0x97E32D77,
		0x11ED935F,
		0x16681281,
		0x0E358829,
		(int32_t)0xC7E61FD6,
		(int32_t)0x96DEDFA1,
		0x7858BA99,
		0x57F584A5,
		0x1B227263,
		(int32_t)0x9B83C3FF,
		0x1AC24696,
		(int32_t)0xCDB30AEB,
		0x532E3054,
		(int32_t)0x8FD948E4,
		0x6DBC3128,
		0x58EBF2EF,
		0x34C6FFEA,
		(int32_t)0xFE28ED61,
		(int32_t)0xEE7C3C73,
		0x5D4A14D9,
		(int32_t)0xE864B7E3,
		0x42105D14,
		0x203E13E0,
		0x45EEE2B6,
		(int32_t)0xA3AAABEA,
		(int32_t)0xDB6C4F15,
		(int32_t)0xFACB4FD0,
		(int32_t)0xC742F442,
		(int32_t)0xEF6ABBB5,
		0x654F3B1D,
		0x41CD2105,
		(int32_t)0xD81E799E,
		(int32_t)0x86854DC7,
		(int32_t)0xE44B476A,
		0x3D816250,
		(int32_t)0xCF62A1F2,
		0x5B8D2646,
		(int32_t)0xFC8883A0,
		(int32_t)0xC1C7B6A3,
		0x7F1524C3,
		0x69CB7492,
		0x47848A0B,
		0x5692B285,
		0x095BBF00,
		(int32_t)0xAD19489D,
		0x1462B174,
		0x23820E00,
		0x58428D2A,
		0x0C55F5EA,
		0x1DADF43E,
		0x233F7061,
		0x3372F092,
		(int32_t)0x8D937E41,
		(int32_t)0xD65FECF1,
		0x6C223BDB,
		0x7CDE3759,
		(int32_t)0xCBEE7460,
		0x4085F2A7,
		(int32_t)0xCE77326E,
		(int32_t)0xA6078084,
		0x19F8509E,
		(int32_t)0xE8EFD855,
		0x61D99735,
		(int32_t)0xA969A7AA,
		(int32_t)0xC50C06C2,
		0x5A04ABFC,
		(int32_t)0x800BCADC,
		(int32_t)0x9E447A2E,
		(int32_t)0xC3453484,
		(int32_t)0xFDD56705,
		0x0E1E9EC9,
		(int32_t)0xDB73DBD3,
		0x105588CD,
		0x675FDA79,
		(int32_t)0xE3674340,
		(int32_t)0xC5C43465,
		0x713E38D8,
		0x3D28F89E,
		(int32_t)0xF16DFF20,
		0x153E21E7,
		(int32_t)0x8FB03D4A,
		(int32_t)0xE6E39F2B,
		(int32_t)0xDB83ADF7,
		(int32_t)0xE93D5A68,
		(int32_t)0x948140F7,
		(int32_t)0xF64C261C,
		(int32_t)0x94692934,
		0x411520F7,
		0x7602D4F7,
		(int32_t)0xBCF46B2E,
		(int32_t)0xD4A20068,
		(int32_t)0xD4082471,
		0x3320F46A,
		0x43B7D4B7,
		0x500061AF,
		0x1E39F62E,
		(int32_t)0x97244546,
		0x14214F74,
		(int32_t)0xBF8B8840,
		0x4D95FC1D,
		(int32_t)0x96B591AF,
		0x70F4DDD3,
		0x66A02F45,
		(int32_t)0xBFBC09EC,
		0x03BD9785,
		0x7FAC6DD0,
		0x31CB8504,
		(int32_t)0x96EB27B3,
		0x55FD3941,
		(int32_t)0xDA2547E6,
		(int32_t)0xABCA0A9A,
		0x28507825,
		0x530429F4,
		0x0A2C86DA,
		(int32_t)0xE9B66DFB,
		0x68DC1462,
		(int32_t)0xD7486900,
		0x680EC0A4,
		0x27A18DEE,
		0x4F3FFEA2,
		(int32_t)0xE887AD8C,
		(int32_t)0xB58CE006,
		0x7AF4D6B6,
		(int32_t)0xAACE1E7C,
		(int32_t)0xD3375FEC,
		(int32_t)0xCE78A399,
		0x406B2A42,
		0x20FE9E35,
		(int32_t)0xD9F385B9,
		(int32_t)0xEE39D7AB,
		0x3B124E8B,
		0x1DC9FAF7,
		0x4B6D1856,
		0x26A36631,
		(int32_t)0xEAE397B2,
		0x3A6EFA74,
		(int32_t)0xDD5B4332,
		0x6841E7F7,
		(int32_t)0xCA7820FB,
		(int32_t)0xFB0AF54E,
		(int32_t)0xD8FEB397,
		0x454056AC,
		(int32_t)0xBA489527,
		0x55533A3A,
		0x20838D87,
		(int32_t)0xFE6BA9B7,
		(int32_t)0xD096954B,
		0x55A867BC,
		(int32_t)0xA1159A58,
		(int32_t)0xCCA92963,
		(int32_t)0x99E1DB33,
		(int32_t)0xA62A4A56,
		0x3F3125F9,
		0x5EF47E1C,
		(int32_t)0x9029317C,
		(int32_t)0xFDF8E802,
		0x04272F70,
		(int32_t)0x80BB155C,
		0x05282CE3,
		(int32_t)0x95C11548,
		(int32_t)0xE4C66D22,
		0x48C1133F,
		(int32_t)0xC70F86DC,
		0x07F9C9EE,
		0x41041F0F,
		0x404779A4,
		0x5D886E17,
		0x325F51EB,
		(int32_t)0xD59BC0D1,
		(int32_t)0xF2BCC18F,
		0x41113564,
		0x257B7834,
		0x602A9C60,
		(int32_t)0xDFF8E8A3,
		0x1F636C1B,
		0x0E12B4C2,
		0x02E1329E,
		(int32_t)0xAF664FD1,
		(int32_t)0xCAD18115,
		0x6B2395E0,
		0x333E92E1,
		0x3B240B62,
		(int32_t)0xEEBEB922,
		(int32_t)0x85B2A20E,
		(int32_t)0xE6BA0D99,
		(int32_t)0xDE720C8C,
		0x2DA2F728,
		(int32_t)0xD0127845,
		(int32_t)0x95B794FD,
		0x647D0862,
		(int32_t)0xE7CCF5F0,
		0x5449A36F,
		(int32_t)0x877D48FA,
		(int32_t)0xC39DFD27,
		(int32_t)0xF33E8D1E,
		0x0A476341,
		(int32_t)0x992EFF74,
		0x3A6F6EAB,
		(int32_t)0xF4F8FD37,
		(int32_t)0xA812DC60,
		(int32_t)0xA1EBDDF8,
		(int32_t)0x991BE14C,
		(int32_t)0xDB6E6B0D,
		(int32_t)0xC67B5510,
		0x6D672C37,
		0x2765D43B,
		(int32_t)0xDCD0E804,
		(int32_t)0xF1290DC7,
		(int32_t)0xCC00FFA3,
		(int32_t)0xB5390F92,
		0x690FED0B,
		0x667B9FFB,
		(int32_t)0xCEDB7D9C,
		(int32_t)0xA091CF0B,
		(int32_t)0xD9155EA3,
		(int32_t)0xBB132F88,
		0x515BAD24,
		0x7B9479BF,
		0x763BD6EB,
		0x37392EB3,
		(int32_t)0xCC115979,
		(int32_t)0x8026E297,
		(int32_t)0xF42E312D,
		0x6842ADA7,
		(int32_t)0xC66A2B3B,
		0x12754CCC,
		0x782EF11C,
		0x6A124237,
		(int32_t)0xB79251E7,
		0x06A1BBE6,
		0x4BFB6350,
		0x1A6B1018,
		0x11CAEDFA,
		0x3D25BDD8,
		(int32_t)0xE2E1C3C9,
		0x44421659,
		0x0A121386,
		(int32_t)0xD90CEC6E,
		(int32_t)0xD5ABEA2A,
		0x64AF674E,
		(int32_t)0xDA86A85F,
		(int32_t)0xBEBFE988,
		0x64E4C3FE,
		(int32_t)0x9DBC8057,
		(int32_t)0xF0F7C086,
		0x60787BF8,
		0x6003604D,
		(int32_t)0xD1FD8346,
		(int32_t)0xF6381FB0,
		0x7745AE04,
		(int32_t)0xD736FCCC,
		(int32_t)0x83426B33,
		(int32_t)0xF01EAB71,
		(int32_t)0xB0804187,
		0x3C005E5F,
		0x77A057BE,
		(int32_t)0xBDE8AE24,
		0x55464299,
		(int32_t)0xBF582E61,
		0x4E58F48F,
		(int32_t)0xF2DDFDA2,
		(int32_t)0xF474EF38,
		(int32_t)0x8789BDC2,
		0x5366F9C3,
		(int32_t)0xC8B38E74,
		(int32_t)0xB475F255,
		0x46FCD9B9,
		0x7AEB2661,
		(int32_t)0x8B1DDF84,
		(int32_t)0x846A0E79,
		(int32_t)0x915F95E2,
		0x466E598E,
		0x20B45770,
		(int32_t)0x8CD55591,
		(int32_t)0xC902DE4C,
		(int32_t)0xB90BACE1,
		(int32_t)0xBB8205D0,
		0x11A86248,
		0x7574A99E,
		(int32_t)0xB77F19B6,
		(int32_t)0xE0A9DC09,
		0x662D09A1,
		(int32_t)0xC4324633,
		(int32_t)0xE85A1F02,
		0x09F0BE8C,
		0x4A99A025,
		0x1D6EFE10,
		0x1AB93D1D,
		0x0BA5A4DF,
		(int32_t)0xA186F20F,
		0x2868F169,
		(int32_t)0xDCB7DA83,
		0x573906FE,
		(int32_t)0xA1E2CE9B,
		0x4FCD7F52,
		0x50115E01,
		(int32_t)0xA70683FA,
		(int32_t)0xA002B5C4,
		0x0DE6D027,
		(int32_t)0x9AF88C27,
		0x773F8641,
		(int32_t)0xC3604C06,
		0x61A806B5,
		(int32_t)0xF0177A28,
		(int32_t)0xC0F586E0,
		0x006058AA,
		0x30DC7D62,
		0x11E69ED7,
		0x2338EA63,
		0x53C2DD94,
		(int32_t)0xC2C21634,
		(int32_t)0xBBCBEE56,
		(int32_t)0x90BCB6DE,
		(int32_t)0xEBFC7DA1,
		(int32_t)0xCE591D76,
		0x6F05E409,
		0x4B7C0188,
		0x39720A3D,
		0x7C927C24,
		(int32_t)0x86E3725F,
		0x724D9DB9,
		0x1AC15BB4,
		(int32_t)0xD39EB8FC,
		(int32_t)0xED545578,
		0x08FCA5B5,
		(int32_t)0xD83D7CD3,
		0x4DAD0FC4,
		0x1E50EF5E,
		(int32_t)0xB161E6F8,
		(int32_t)0xA28514D9,
		0x6C51133C,
		0x6FD5C7E7,
		0x56E14EC4,
		0x362ABFCE,
		(int32_t)0xDDC6C837,
		(int32_t)0xD79A3234,
		(int32_t)0x92638212,
		0x670EFA8E,
		0x406000E0,
		0x3A39CE37,
		(int32_t)0xD3FAF5CF,
		(int32_t)0xABC27737,
		0x5AC52D1B,
		0x5CB0679E,
		0x4FA33742,
		(int32_t)0xD3822740,
		(int32_t)0x99BC9BBE,
		(int32_t)0xD5118E9D,
		(int32_t)0xBF0F7315,
		(int32_t)0xD62D1C7E,
		(int32_t)0xC700C47B,
		(int32_t)0xB78C1B6B,
		0x21A19045,
		(int32_t)0xB26EB1BE,
		0x6A366EB4,
		0x5748AB2F,
		(int32_t)0xBC946E79,
		(int32_t)0xC6A376D2,
		0x6549C2C8,
		0x530FF8EE,
		0x468DDE7D,
		(int32_t)0xD5730A1D,
		0x4CD04DC6,
		0x2939BBDB,
		(int32_t)0xA9BA4650,
		(int32_t)0xAC9526E8,
		(int32_t)0xBE5EE304,
		(int32_t)0xA1FAD5F0,
		0x6A2D519A,
		0x63EF8CE2,
		(int32_t)0x9A86EE22,
		(int32_t)0xC089C2B8,
		0x43242EF6,
		(int32_t)0xA51E03AA,
		(int32_t)0x9CF2D0A4,
		(int32_t)0x83C061BA,
		(int32_t)0x9BE96A4D,
		(int32_t)0x8FE51550,
		(int32_t)0xBA645BD6,
		0x2826A2F9,
		(int32_t)0xA73A3AE1,
		0x4BA99586,
		(int32_t)0xEF5562E9,
		(int32_t)0xC72FEFD3,
		(int32_t)0xF752F7DA,
		0x3F046F69,
		0x77FA0A59,
		(int32_t)0x80E4A915,
		(int32_t)0x87B08601,
		(int32_t)0x9B09E6AD,
		0x3B3EE593,
		(int32_t)0xE990FD5A,
		(int32_t)0x9E34D797,
		0x2CF0B7D9,
		0x022B8B51,
		(int32_t)0x96D5AC3A,
		0x017DA67D,
		(int32_t)0xD1CF3ED6,
		0x7C7D2D28,
		0x1F9F25CF,
		(int32_t)0xADF2B89B,
		0x5AD6B472,
		0x5A88F54C,
		(int32_t)0xE029AC71,
		(int32_t)0xE019A5E6,
		0x47B0ACFD,
		(int32_t)0xED93FA9B,
		(int32_t)0xE8D3C48D,
		0x283B57CC,
		(int32_t)0xF8D56629,
		0x79132E28,
		0x785F0191,
		(int32_t)0xED756055,
		(int32_t)0xF7960E44,
		(int32_t)0xE3D35E8C,
		0x15056DD4,
		(int32_t)0x88F46DBA,
		0x03A16125,
		0x0564F0BD,
		(int32_t)0xC3EB9E15,
		0x3C9057A2,
		(int32_t)0x97271AEC,
		(int32_t)0xA93A072A,
		0x1B3F6D9B,
		0x1E6321F5,
		(int32_t)0xF59C66FB,
		0x26DCF319,
		0x7533D928,
		(int32_t)0xB155FDF5,
		0x03563482,
		(int32_t)0x8ABA3CBB,
		0x28517711,
		(int32_t)0xC20AD9F8,
		(int32_t)0xABCC5167,
		(int32_t)0xCCAD925F,
		0x4DE81751,
		0x3830DC8E,
		0x379D5862,
		(int32_t)0x9320F991,
		(int32_t)0xEA7A90C2,
		(int32_t)0xFB3E7BCE,
		0x5121CE64,
		0x774FBE32,
		(int32_t)0xA8B6E37E,
		(int32_t)0xC3293D46,
		0x48DE5369,
		0x6413E680,
		(int32_t)0xA2AE0810,
		(int32_t)0xDD6DB224,
		0x69852DFD,
		0x09072166,
		(int32_t)0xB39A460A,
		0x6445C0DD,
		0x586CDECF,
		0x1C20C8AE,
		0x5BBEF7DD,
		0x1B588D40,
		(int32_t)0xCCD2017F,
		0x6BB4E3BB,
		(int32_t)0xDDA26A7E,
		0x3A59FF45,
		0x3E350A44,
		(int32_t)0xBCB4CDD5,
		0x72EACEA8,
		(int32_t)0xFA6484BB,
		(int32_t)0x8D6612AE,
		(int32_t)0xBF3C6F47,
		(int32_t)0xD29BE463,
		0x542F5D9E,
		(int32_t)0xAEC2771B,
		(int32_t)0xF64E6370,
		0x740E0D8D,
		(int32_t)0xE75B1357,
		(int32_t)0xF8721671,
		(int32_t)0xAF537D5D,
		0x4040CB08,
		0x4EB4E2CC,
		0x34D2466A,
		0x0115AF84,
		(int32_t)0xE1B00428,
		(int32_t)0x95983A1D,
		0x06B89FB4,
		(int32_t)0xCE6EA048,
		0x6F3F3B82,
		0x3520AB82,
		0x011A1D4B,
		0x277227F8,
		0x611560B1,
		(int32_t)0xE7933FDC,
		(int32_t)0xBB3A792B,
		0x344525BD,
		(int32_t)0xA08839E1,
		0x51CE794B,
		0x2F32C9B7,
		(int32_t)0xA01FBAC9,
		(int32_t)0xE01CC87E,
		(int32_t)0xBCC7D1F6,
		(int32_t)0xCF0111C3,
		(int32_t)0xA1E8AAC7,
		0x1A908749,
		(int32_t)0xD44FBD9A,
		(int32_t)0xD0DADECB,
		(int32_t)0xD50ADA38,
		0x0339C32A,
		(int32_t)0xC6913667,
		(int32_t)0x8DF9317C,
		(int32_t)0xE0B12B4F,
		(int32_t)0xF79E59B7,
		0x43F5BB3A,
		(int32_t)0xF2D519FF,
		0x27D9459C,
		(int32_t)0xBF97222C,
		0x15E6FC2A,
		0x0F91FC71,
		(int32_t)0x9B941525,
		(int32_t)0xFAE59361,
		(int32_t)0xCEB69CEB,
		(int32_t)0xC2A86459,
		0x12BAA8D1,
		(int32_t)0xB6C1075E,
		(int32_t)0xE3056A0C,
		0x10D25065,
		(int32_t)0xCB03A442,
		(int32_t)0xE0EC6E0E,
		0x1698DB3B,
		0x4C98A0BE,
		0x3278E964,
		(int32_t)0x9F1F9532,
		(int32_t)0xE0D392DF,
		(int32_t)0xD3A0342B,
		(int32_t)0x8971F21E,
		0x1B0A7441,
		0x4BA3348C,
		(int32_t)0xC5BE7120,
		(int32_t)0xC37632D8,
		(int32_t)0xDF359F8D,
		(int32_t)0x9B992F2E,
		(int32_t)0xE60B6F47,
		0x0FE3F11D,
		(int32_t)0xE54CDA54,
		0x1EDAD891,
		(int32_t)0xCE6279CF,
		(int32_t)0xCD3E7E6F,
		0x1618B166,
		(int32_t)0xFD2C1D05,
		(int32_t)0x848FD2C5,
		(int32_t)0xF6FB2299,
		(int32_t)0xF523F357,
		(int32_t)0xA6327623,
		(int32_t)0x93A83531,
		0x56CCCD02,
		(int32_t)0xACF08162,
		0x5A75EBB5,
		0x6E163697,
		(int32_t)0x88D273CC,
		(int32_t)0xDE966292,
		(int32_t)0x81B949D0,
		0x4C50901B,
		0x71C65614,
		(int32_t)0xE6C6C7BD,
		0x327A140A,
		0x45E1D006,
		(int32_t)0xC3F27B9A,
		(int32_t)0xC9AA53FD,
		0x62A80F00,
		(int32_t)0xBB25BFE2,
		0x35BDD2F6,
		0x71126905,
		(int32_t)0xB2040222,
		(int32_t)0xB6CBCF7C,
		(int32_t)0xCD769C2B,
		0x53113EC0,
		0x1640E3D3,
		0x38ABBD60,
		0x2547ADF0,
		(int32_t)0xBA38209C,
		(int32_t)0xF746CE76,
		0x77AFA1C5,
		0x20756060,
		(int32_t)0x85CBFE4E,
		(int32_t)0x8AE88DD8,
		0x7AAAF9B0,
		0x4CF9AA7E,
		0x1948C25C,
		0x02FB8A8C,
		0x01C36AE4,
		(int32_t)0xD6EBE1F9,
		(int32_t)0x90D4F869,
		(int32_t)0xA65CDEA0,
		0x3F09252D,
		(int32_t)0xC208E69F,
		(int32_t)0xB74E6132,
		(int32_t)0xCE77E25B,
		0x578FDFE3,
		0x3AC372E6
	}));
}

BlowfishCrypt::BlowfishCrypt() {
}

$Class* BlowfishCrypt::load$($String* name, bool initialize) {
	$loadClass(BlowfishCrypt, name, initialize, &_BlowfishCrypt_ClassInfo_, clinit$BlowfishCrypt, allocate$BlowfishCrypt);
	return class$;
}

$Class* BlowfishCrypt::class$ = nullptr;

			} // provider
		} // crypto
	} // sun
} // com